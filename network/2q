import torch
from torch.autograd import Function

class BinaryLayer(Function):
    @staticmethod
    def forward(ctx, input):
        result = torch.sign(input)
        ctx.save_for_backward(result)
        return result

    @staticmethod
    def backward(ctx, grad_output):
        grad_output = grad_output.clamp_(-1, 1)
        result, = ctx.saved_tensors
        return grad_output*result


class GCNv2(torch.nn.Module):
    def __init__(self):
        super(GCNv2, self).__init__()
        self.elu = torch.nn.ELU(inplace=True)

        self.conv1 = torch.nn.Conv2d(1, 32, kernel_size=4, stride=2, padding=1)
        self.conv2 = torch.nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1)

        self.conv3_1 = torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.conv3_2 = torch.nn.Conv2d(128, 128, kernel_size=4, stride=2, padding=1)

        self.conv4_1 = torch.nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.conv4_2 = torch.nn.Conv2d(256, 256, kernel_size=4, stride=2, padding=1)

        # Descriptor
        self.convF_1 = torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.convF_2 = torch.nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0)

        # Detector
        self.convD_1 = torch.nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1)
        self.convD_2 = torch.nn.Conv2d(256, 256, kernel_size=1, stride=1, padding=0)

        self.pixel_shuffle = torch.nn.PixelShuffle(16)
        self.Binary = BinaryLayer()

    def forward(self, x, label):
#        print(label.size())
        x = self.elu(self.conv1(x))
        x = self.elu(self.conv2(x))

        x = self.elu(self.conv3_1(x))
        x = self.elu(self.conv3_2(x))

        x = self.elu(self.conv4_1(x))
        x = self.elu(self.conv4_2(x))

        # Descriptor xF
        xF = self.elu(self.convF_1(x))
        desc = self.convF_2(xF)
        dn = torch.norm(desc, p=2, dim=1) # Compute the norm.
        desc = desc.div(torch.unsqueeze(dn, 1)) # Divide by norm to normalize.

        # Detector xD
        xD = self.elu(self.convD_1(x))
        det = self.convD_2(xD).sigmoid()
        det = self.pixel_shuffle(det)

        for batch in range(label.size()[0]):
            x, y = torch.nonzero(label[batch][0] == 1.0)[:, 0], torch.nonzero(label[batch][0] == 1.0)[:, 1]
#            x, y = torch.nonzero(label[batch][0] == 1.0, as_tuple=True)
#            x, y = torch.where(label[batch][0] == 1.0)
            x = x.type(torch.FloatTensor)
            y = y.type(torch.FloatTensor)
            x_div = x*2/label.size()[0]-1
            y_div = y*2/label.size()[1]-1
            x_div.unsqueeze_(-1)
            y_div.unsqueeze_(-1)
            grid = torch.cat((x_div,y_div), -1).unsqueeze_(0).unsqueeze_(0).cuda()
            input_grid = desc[batch][0]
            input_grid.unsqueeze_(0).unsqueeze_(0)
            out_desc = torch.nn.functional.grid_sample(input_grid, grid)

            indice1 = torch.tensor(batch).cuda()


            for i in range(1, desc.size()[1]):
                indice2 = torch.tensor(i).cuda()
                chip = torch.index_select(torch.index_select(desc, index=indice1, dim=0), index=indice2, dim=1)
                out_desc = torch.cat((out_desc, torch.nn.functional.grid_sample(chip, grid)), 0)
        out_desc = self.Binary(out_desc)
        out_desc.squeeze_()
        return out_desc, det, x, y


def GCNnet():
    return GCNv2()
